/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * CounterButton exposes a pressable control that tracks a count internally and notifies consumers
     * whenever it changes. The component is self-contained yet easy to wire into analytics or state stores
     * via the `countChange` event.
     */
    interface CounterButton {
        /**
          * Optional description text rendered below the button.
         */
        "description"?: string;
        /**
          * Initial value used when the component connects.
          * @default 0
         */
        "initial": number;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface CounterButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCounterButtonElement;
}
declare global {
    interface HTMLCounterButtonElementEventMap {
        "countChange": number;
    }
    /**
     * CounterButton exposes a pressable control that tracks a count internally and notifies consumers
     * whenever it changes. The component is self-contained yet easy to wire into analytics or state stores
     * via the `countChange` event.
     */
    interface HTMLCounterButtonElement extends Components.CounterButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCounterButtonElementEventMap>(type: K, listener: (this: HTMLCounterButtonElement, ev: CounterButtonCustomEvent<HTMLCounterButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCounterButtonElementEventMap>(type: K, listener: (this: HTMLCounterButtonElement, ev: CounterButtonCustomEvent<HTMLCounterButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCounterButtonElement: {
        prototype: HTMLCounterButtonElement;
        new (): HTMLCounterButtonElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "counter-button": HTMLCounterButtonElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    /**
     * CounterButton exposes a pressable control that tracks a count internally and notifies consumers
     * whenever it changes. The component is self-contained yet easy to wire into analytics or state stores
     * via the `countChange` event.
     */
    interface CounterButton {
        /**
          * Optional description text rendered below the button.
         */
        "description"?: string;
        /**
          * Initial value used when the component connects.
          * @default 0
         */
        "initial"?: number;
        /**
          * Emitted every time the counter changes.
         */
        "onCountChange"?: (event: CounterButtonCustomEvent<number>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "counter-button": CounterButton;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * CounterButton exposes a pressable control that tracks a count internally and notifies consumers
             * whenever it changes. The component is self-contained yet easy to wire into analytics or state stores
             * via the `countChange` event.
             */
            "counter-button": LocalJSX.CounterButton & JSXBase.HTMLAttributes<HTMLCounterButtonElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
